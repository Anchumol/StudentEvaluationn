{"ast":null,"code":"import isEqual from 'lodash/isEqual';\nimport inRange from 'lodash/inRange';\nimport upperCase from 'lodash/upperCase';\n/**\n * This function adds an ordinal suffix to a number.\n * \n * Example:\n * \n * 1 -> 1st\n * \n * 2 -> 2nd\n * \n * @param {Number} number \n * @returns The number with an ordinal suffix\n */\n\nexport const withOrdSuffix = (number = 0) => {\n  const ordinalRules = new Intl.PluralRules(\"en\", {\n    type: \"ordinal\"\n  });\n  const suffixes = {\n    one: \"st\",\n    two: \"nd\",\n    few: \"rd\",\n    other: \"th\"\n  };\n  return `${number}${suffixes[ordinalRules.select(number)]}`;\n};\n/**\n * This function returns an array of Semesters in the 4 year Engineering Course\n * \n * @returns [1, ..., 8]\n */\n\nexport const Semesters = Array.from({\n  length: 8\n}, (_, i) => i + 1);\n/**\n * This function rounds a number to 2 decimal digits\n * @param {Number} number \n * @returns The number rounded to 2 decimal digits\n */\n\nexport const roundToTwo = (number = 0) => +(Math.round(number + \"e+2\") + \"e-2\");\n/**\n * This function converts a string to uppercase\n * @param {String} string \n * @returns The string in uppercase\n */\n\nexport const toCapital = string => upperCase(String(string));\n/**\n * This function removes extra spaces from the beginning, middle & the end of a string\n * @param {String} string \n * @returns String without unwanted spaces\n */\n\nexport const formatString = string => String(string).replace(/\\s+/g, \" \").trim();\n/**\n * This function calculates total marks scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The total marks scored in the semester as a formatted string\n */\n\nexport const totalMarksScored = (subjectsData = []) => {\n  if (isEqual(subjectsData, [])) return '';\n  let scoredMarks = subjectsData.map(i => i.scoredMarks).reduce((prev, next) => prev + next, 0),\n      maxMarks = subjectsData.map(i => i.maxMarks).reduce((prev, next) => prev + next, 0);\n  return `${scoredMarks} / ${maxMarks}`;\n};\n/**\n * This function caculates the overall percentage scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The overall percentage scored in the semester\n */\n\nexport const percentage = (subjectsData = []) => {\n  if (isEqual(subjectsData, [])) return '';\n  let scoredMarks = subjectsData.map(i => i.scoredMarks).reduce((prev, next) => prev + next, 0),\n      maxMarks = subjectsData.map(i => i.maxMarks).reduce((prev, next) => prev + next, 0);\n  return roundToTwo(scoredMarks / maxMarks * 100);\n};\n/**\n * This function calculates the Grade Points scored in a subject (based on VTU Regulations)\n * @param {Number} scoredMarks \n * @param {Number} maxMarks \n * @returns The Grade Points scored in the subject\n */\n\nexport const getGradePoints = (scoredMarks, maxMarks) => {\n  let marks = scoredMarks / maxMarks * 100;\n  if (inRange(marks, 90, 100 + 1)) return 10;else if (inRange(marks, 80, 90)) return 9;else if (inRange(marks, 70, 80)) return 8;else if (inRange(marks, 60, 70)) return 7;else if (inRange(marks, 45, 60)) return 6;else if (inRange(marks, 40, 45)) return 4;else return 0;\n};\n/**\n * This function calculates the SGPA scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The SGPA scored in the semester\n */\n\nexport const calculateSGPA = (subjectsData = []) => {\n  if (isEqual(subjectsData, [])) return '';\n  let totalCredits = 0,\n      totalCreditPoints = 0;\n\n  for (let i = 0; i < subjectsData.length; i++) {\n    let {\n      credits,\n      scoredMarks,\n      maxMarks\n    } = subjectsData[i];\n    totalCredits += credits;\n    totalCreditPoints += credits * getGradePoints(scoredMarks, maxMarks);\n  }\n\n  return roundToTwo(totalCreditPoints / totalCredits);\n};\n/**\n * This function calculates the \n * @param {*} results Subjects Data for all the semesters\n * @returns The current overall CGPA scored across all the semesters\n */\n\nexport const calculateCGPA = (results = []) => {\n  if (isEqual(results, [])) return '';\n  let totalCredits = 0,\n      totalCreditPoints = 0;\n\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].semResult.length; j++) {\n      let {\n        credits,\n        scoredMarks,\n        maxMarks\n      } = results[i].semResult[j];\n      totalCredits += credits;\n      totalCreditPoints += credits * getGradePoints(scoredMarks, maxMarks);\n    }\n  }\n\n  return roundToTwo(totalCreditPoints / totalCredits);\n};","map":{"version":3,"sources":["C:/Users/Digital/Desktop/accademic/RESSTAT-main/RESSTAT-main/src/util/helper.js"],"names":["isEqual","inRange","upperCase","withOrdSuffix","number","ordinalRules","Intl","PluralRules","type","suffixes","one","two","few","other","select","Semesters","Array","from","length","_","i","roundToTwo","Math","round","toCapital","string","String","formatString","replace","trim","totalMarksScored","subjectsData","scoredMarks","map","reduce","prev","next","maxMarks","percentage","getGradePoints","marks","calculateSGPA","totalCredits","totalCreditPoints","credits","calculateCGPA","results","j","semResult"],"mappings":"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","sourcesContent":["import isEqual from 'lodash/isEqual'\nimport inRange from 'lodash/inRange'\nimport upperCase from 'lodash/upperCase'\n\n/**\n * This function adds an ordinal suffix to a number.\n * \n * Example:\n * \n * 1 -> 1st\n * \n * 2 -> 2nd\n * \n * @param {Number} number \n * @returns The number with an ordinal suffix\n */\nexport const withOrdSuffix = (number = 0) => {\n    const ordinalRules = new Intl.PluralRules(\"en\", { type: \"ordinal\" })\n    const suffixes = {\n        one: \"st\",\n        two: \"nd\",\n        few: \"rd\",\n        other: \"th\",\n    }\n    return `${ number }${ suffixes[ ordinalRules.select(number) ] }`\n}\n\n/**\n * This function returns an array of Semesters in the 4 year Engineering Course\n * \n * @returns [1, ..., 8]\n */\nexport const Semesters = Array.from({ length: 8 }, (_, i) => i + 1)\n\n/**\n * This function rounds a number to 2 decimal digits\n * @param {Number} number \n * @returns The number rounded to 2 decimal digits\n */\nexport const roundToTwo = (number = 0) => +(Math.round(number + \"e+2\") + \"e-2\")\n\n/**\n * This function converts a string to uppercase\n * @param {String} string \n * @returns The string in uppercase\n */\nexport const toCapital = string => upperCase(String(string))\n\n/**\n * This function removes extra spaces from the beginning, middle & the end of a string\n * @param {String} string \n * @returns String without unwanted spaces\n */\nexport const formatString = string => String(string).replace(/\\s+/g, \" \").trim()\n\n/**\n * This function calculates total marks scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The total marks scored in the semester as a formatted string\n */\nexport const totalMarksScored = (subjectsData = []) => {\n    if (isEqual(subjectsData, [])) return ''\n\n    let scoredMarks = subjectsData.map(i => i.scoredMarks).reduce((prev, next) => prev + next, 0),\n        maxMarks = subjectsData.map(i => i.maxMarks).reduce((prev, next) => prev + next, 0)\n    return `${ scoredMarks } / ${ maxMarks }`\n}\n\n/**\n * This function caculates the overall percentage scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The overall percentage scored in the semester\n */\nexport const percentage = (subjectsData = []) => {\n    if (isEqual(subjectsData, [])) return ''\n\n    let scoredMarks = subjectsData.map(i => i.scoredMarks).reduce((prev, next) => prev + next, 0),\n        maxMarks = subjectsData.map(i => i.maxMarks).reduce((prev, next) => prev + next, 0)\n    return roundToTwo((scoredMarks / maxMarks) * 100)\n}\n\n/**\n * This function calculates the Grade Points scored in a subject (based on VTU Regulations)\n * @param {Number} scoredMarks \n * @param {Number} maxMarks \n * @returns The Grade Points scored in the subject\n */\nexport const getGradePoints = (scoredMarks, maxMarks) => {\n    let marks = (scoredMarks / maxMarks) * 100\n    if (inRange(marks, 90, 100 + 1)) return 10\n    else if (inRange(marks, 80, 90)) return 9\n    else if (inRange(marks, 70, 80)) return 8\n    else if (inRange(marks, 60, 70)) return 7\n    else if (inRange(marks, 45, 60)) return 6\n    else if (inRange(marks, 40, 45)) return 4\n    else return 0\n}\n\n\n/**\n * This function calculates the SGPA scored in a semester\n * @param {*} subjectsData Subjects Data for one semester\n * @returns The SGPA scored in the semester\n */\nexport const calculateSGPA = (subjectsData = []) => {\n    if (isEqual(subjectsData, [])) return ''\n\n    let totalCredits = 0,\n        totalCreditPoints = 0\n\n    for (let i = 0; i < subjectsData.length; i++) {\n        let { credits, scoredMarks, maxMarks } = subjectsData[ i ]\n        totalCredits += credits\n        totalCreditPoints += (credits * getGradePoints(scoredMarks, maxMarks))\n    }\n\n    return roundToTwo(totalCreditPoints / totalCredits)\n}\n\n/**\n * This function calculates the \n * @param {*} results Subjects Data for all the semesters\n * @returns The current overall CGPA scored across all the semesters\n */\nexport const calculateCGPA = (results = []) => {\n    if (isEqual(results, [])) return ''\n\n    let totalCredits = 0,\n        totalCreditPoints = 0\n\n    for (let i = 0; i < results.length; i++) {\n        for (let j = 0; j < results[ i ].semResult.length; j++) {\n            let { credits, scoredMarks, maxMarks } = results[ i ].semResult[ j ]\n            totalCredits += credits\n            totalCreditPoints += (credits * getGradePoints(scoredMarks, maxMarks))\n        }\n    }\n\n    return roundToTwo(totalCreditPoints / totalCredits)\n}"]},"metadata":{},"sourceType":"module"}